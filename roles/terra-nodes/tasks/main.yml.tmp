---
- name: Add user "{{ terra_username }}"
  user:
    name: "{{ terra_username }}"
    shell: /bin/bash

- name: update and install packages
  apt:
    update_cache: true
    state: latest
    pkg:
    - make
    - gcc
    - acl
    - libhidapi-dev
    - g++
    - build-essential
    - git
    - python
    - wget
    - liblz4-tool
    - aria2
    - jq

- name: Update .profile
  blockinfile:
    path: /home/{{ terra_username }}/.profile
    owner: "{{ terra_username }}"
    group: "{{ terra_username }}"
    create: yes
    mode: "644"
    block: |
      GOPATH="$HOME/go"
      PATH="$GOPATH/bin:$PATH"
      PATH="$PATH:/usr/local/go/bin"

- name: Get files from github
  git:
    repo: "https://github.com/{{ repository }}"
    dest: "/home/{{ terra_username }}/go/src/github.com/{{ repository }}"
    version: "{{ version }}"
    force: yes
  become: yes
  become_user: "{{ terra_username }}"

- name: Create GOBIN directory if it does not exist
  file:
    path: "/home/{{ terra_username }}/go/bin"
    owner: "{{ terra_username }}"
    group: "{{ terra_username }}"
    state: directory
    mode: '0775'

- name: Delete go install dir before unpacking
  file:
    path: "/usr/local/go"
    state: absent

- name: Download Go
  get_url:
    url: "{{ go_url }}"
    dest: "/root"
  register: dl_go
  become: yes
  become_user: root

- name: Extract Go
  unarchive:
    src: "{{ dl_go.dest }}"
    remote_src: yes
    dest: /usr/local/
  become: yes
  become_user: root

- name: Install dep
  shell: "source /home/{{ terra_username }}/.profile && curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh"
  args:
    creates: "/home/{{ terra_username }}/go/bin/dep"
    executable: /bin/bash
    chdir: "/home/{{ terra_username }}/"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"

- name: Populate service facts
  service_facts:

- name: stop service if exists
  systemd:
    name: "{{ service }}"
    state: stopped
  when: service_full in ansible_facts.services

- name: Make install
  shell: "source /home/{{ terra_username }}/.profile && make install"
  args:
    executable: /bin/bash
    chdir: "/home/{{ terra_username }}/go/src/github.com/{{ repository }}"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"

- name: Init chain
  shell: "source /home/{{ terra_username }}/.profile && {{ service_executable }} init {{ moniker }} --chain-id {{ chain_id }}"
  args:
    creates: "{{ service_homedir }}/config/genesis.json"
    executable: /bin/bash
    chdir: "/home/{{ terra_username }}/"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"

- name: Delete Genesis
  file:
    path: "{{ service_homedir }}/config/genesis.json"
    state: 'absent'

- name: Download Genesis
  get_url:
    url: "{{ genesis }}"
    owner: "{{ terra_username }}"
    group: "{{ terra_username }}"
    dest: "{{ service_homedir }}/config/genesis.json"
    mode: '0640'

- name: Download Addressbook
  get_url:
    url: "{{ addressbook }}"
    owner: "{{ terra_username }}"
    group: "{{ terra_username }}"
    dest: "{{ service_homedir }}/config/addrbook.json"
    mode: '0640'

- name: Backup config
  shell: "cp {{ service_homedir }}/config/config.toml {{ service_homedir }}/config/config.toml.backup"
  args:
    creates: "{{ service_homedir }}/config/config.toml.backup"
    executable: /bin/bash
    chdir: "/home/{{ terra_username }}/"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"

# #####
# # - name: add persistent_peers
# #   lineinfile:
# #     path: "{{ service_homedir }}/config/config.toml"
# #     regexp: '^persistent_peers'
# #     line: 'persistent_peers = "{{ persistent_peer }}"'
# #   when: persistent_peer is defined

# # - name: add private_peers
# #   lineinfile:
# #     path: "{{ service_homedir }}/config/config.toml"
# #     regexp: '^private_peer_ids'
# #     line: 'private_peer_ids = "{{ private_peer }}"'
# #   when: private_peer is defined
# #####

- name: add seeds
  lineinfile:
    path: "{{ service_homedir }}/config/config.toml"
    regexp: '^seeds'
    line: 'seeds = "{{ seeds  }}"'
  when: seeds is defined
  become: yes
  become_user: "{{ terra_username }}"

- name: enable LCD
  lineinfile:
    path: "{{ service_homedir }}/config/app.toml"
    regexp: '^enable = fals*'
    line: 'enable = true'
  become: yes
  become_user: "{{ terra_username }}"

- name: enable LCD
  lineinfile:
    path: "{{ service_homedir }}/config/app.toml"
    regexp: '^enable = fals*'
    line: 'enable = true'
  become: yes
  become_user: "{{ terra_username }}"

- name: open 26657 to listen on all interfaces
  lineinfile:
    path: /home/terra/.terra/config/config.toml
    regexp: '^laddr = "tcp://127.0.0.1:26657"'
    line: 'laddr = "tcp://0.0.0.0:26657"'
  become: yes
  become_user: "{{ terra_username }}"

- name: enable prometheus
  lineinfile:
    path: "{{ service_homedir }}/config/config.toml"
    regexp: '^prometheus ='
    line: 'prometheus = {{ prometheus_flag  }}'
  when: prometheus_flag is defined

- name: Create Systemd file
  template:
    src: "files/{{ service_full }}"
    dest: "/etc/systemd/system/{{ service_full }}"

- name: open file limits
  template:
    src: "files/limits.conf"
    dest: "/etc/security/limits.conf"





## do this first; seems our IP gets rate-limited if DLing with aria2c
- name: Download Quicksync Checksum
  shell: "wget https://dl2.quicksync.io/{{ chain_id }}-{{ quicksync }}.{{ snapshot_filename }}.checksum"
  args:
    executable: /bin/bash
    chdir: "{{ download_dir }}"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"
  when: quicksync == 'pruned' or quicksync == 'default' or quicksync == 'archive'

- name: Download Quicksync File
  shell: "aria2c -x2 https://dl2.quicksync.io/{{ chain_id }}-{{ quicksync }}.{{ snapshot_filename }}"
  args:
    executable: /bin/bash
    chdir: "{{ download_dir }}"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"
  when: quicksync == 'pruned' or quicksync == 'default' or quicksync == 'archive'
  async: 72000
  poll: 10


# in case of rate-limiting:
# - name: WGET Download Quicksync File Wget
#   shell: "wget https://dl2.quicksync.io/{{ chain_id }}-{{ quicksync }}.{{ snapshot_filename }}"
#   args:
#     executable: /bin/bash
#     chdir: "{{ download_dir }}"
#     warn: no
#   become: yes
#   become_user: "{{ terra_username }}"
#   when: quicksync == 'pruned' or quicksync == 'default' or quicksync == 'archive'



- name: Copy checksum tool
  copy:
    src: "checksum.sh"
    dest: "{{ download_dir }}"
    mode: '0775'

- name: Checksum Quicksync File
  shell: "./checksum.sh {{ chain_id }}-{{ quicksync }}.{{ snapshot_filename }}"
  args:
    executable: /bin/bash
    chdir: "{{ download_dir }}"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"
  when: quicksync == 'pruned' or quicksync == 'default' or quicksync == 'archive'

- name: Delete data dir before unpacking
  file:
    path: "{{ service_homedir }}/data"
    state: absent

- name: Extract Quicksync File
  shell: "tar -I lz4 -xf {{ download_dir }}/{{ chain_id }}-{{ quicksync }}.{{ snapshot_filename }}"
  args:
    executable: /bin/bash
    chdir: "{{ service_homedir }}/"
    warn: no
  become: yes
  become_user: "{{ terra_username }}"
  when: quicksync == 'pruned' or quicksync == 'default' or quicksync == 'archive'
  async: 72000
  poll: 10

- name: enable and start the nodes
  systemd:
    name: "{{ service }}"
    state: started
    daemon_reload: yes
    enabled: yes
